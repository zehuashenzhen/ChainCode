/*
 * Copyright IBM Corp. 2018 All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
	id 'java'
	id 'maven-publish'
	id 'jacoco'
	id 'com.google.protobuf' version '0.8.3'
	id 'net.linguica.maven-settings' version '0.5'
}

protobuf {
	protoc {
		// download the protobuf compiler
		artifact = 'com.google.protobuf:protoc:3.0.0'
	}
	plugins {
		// define grpc plugin for the protobuf compiler
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.6.1'
		}
	}
	generateProtoTasks {
		all()*.plugins {
			// apply the grpc plugin for the protobuf compiler
			grpc {}
		}
	}
}

sourceSets {
	main {
		java {
			// adding the protobuf & grpc generated source explicitly,
			// so that IDEs can find the generated sources.
			srcDirs 'build/generated/source/proto/main/grpc'
			srcDirs 'build/generated/source/proto/main/java'
		}
	}
}

dependencies {
	compile 'com.google.protobuf:protobuf-java:3.0.0'
	compile 'com.google.protobuf:protobuf-java-util:3.0.0'
	compile 'io.grpc:grpc-netty:1.6.1'
	compile 'io.grpc:grpc-protobuf:1.6.1'
	compile 'io.grpc:grpc-stub:1.6.1'
	compile 'commons-cli:commons-cli:1.3.1'
	compile 'commons-logging:commons-logging:1.2'
	testCompile 'junit:junit:4.12'
	testCompile 'org.hamcrest:hamcrest-library:1.3'
	testCompile "org.mockito:mockito-core:2.+"
}

publishing {
	publications {
		// define the publication of the shim jar
		shimJar(MavenPublication) {
			from components.java
			artifactId 'fabric-chaincode-shim'
		}
	}
}

publishing {
	repositories {
		// hyperledger snapshots repository
		maven {
			url 'https://nexus.hyperledger.org/content/repositories/snapshots'
			name 'hyperledger-snapshots'
		}
		// hyperledger release repository
		maven {
			url 'https://nexus.hyperledger.org/content/repositories/releases'
			name 'hyperledger-releases'
		}
	}
}

// override the location of the maven user settings file
if(project.hasProperty('maven.settings.location')) {
	mavenSettings {
		userSettingsFileName = project.property('maven.settings.location')
	}
}

jacoco {
	toolVersion = "0.7.+"
}

jacocoTestReport {
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: 'org/hyperledger/fabric/protos/**')
		})
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			//FIXME: after all unit test added, remove this property
			includes = ['org.hyperledger.fabric.shim.ledger.*',
			            'org.hyperledger.fabric.shim.impl.ChaincodeStubImpl']
			limit {
				minimum = 0.9
			}
		}
	}
}

test.finalizedBy(jacocoTestReport)
test.finalizedBy(jacocoTestCoverageVerification)

task licenseCheck {
	group = "license"
	description = "Checks the License part of each source file"

	println "Checking Licences..."
	def noSPDX = new LinkedList<File>()
	def missing = new LinkedList<File>()
	sourceSets.forEach {
		sourceSet ->
			sourceSet.allSource.findAll { !it.path.contains("build") }.each {
				file ->
					BufferedReader r = new BufferedReader(new FileReader(file))
					def line, hasSPDX = false, hasTraditional = false
					while ((line = r.readLine()) != null) {
						if (line.contains("SPDX-License-Identifier")) {
							hasSPDX = true
							break
						}
						if (line.contains("http://www.apache.org/licenses/LICENSE-2.0")) {
							hasTraditional = true
							break
						}
					}
					if (!hasSPDX) {
						if (hasTraditional) {
							noSPDX.add(file)
						} else {
							missing.add(file)
						}
					}
			}
	}

	if (noSPDX.isEmpty()) {
		println "All remaining files have Apache 2.0 headers"
	} else {
		println "We are standardizing with the SPDX style license headers."
		println "The following files contain the traditional license headers which are still valid:"
		noSPDX.each {
			f -> println "\t" + f.getPath()
		}
		println "If you need to make a content update, please replace the Apache license header comment text with:"
		println "\tSPDX-License-Identifier: Apache-2.0\n"
	}

	if (!missing.isEmpty()) {
		def error = "The following files are missing Apache 2.0 headers:\n"
		missing.each {
			f -> error += f.getPath() + "\n"
		}
		error += "Fatal Error - All files must have a license header"
		throw new IllegalArgumentException(error)
	}
}

build.dependsOn licenseCheck